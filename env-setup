#!/bin/bash

help()
{
    echo "Environment setup helper"
    echo ""
    echo "Commands:"
    echo "-h --help             print help"
    echo ""
    echo "Environment:"
    echo "-d --dev              init dev environment variable"
    echo "-o --home             init home environment variable"
    echo "-m --monitor-env      init environment variables for controlling monitor output at ~/.config."
    echo "                         It copies content of the files: '.config/monitor-environment' and '.config/xprofile-variables'."
    echo ""
    echo "Configs:"
    echo "-b --bash             init .bashrc and .bash_profile"
    echo "-v --vim              init .vimrc"
    echo "-g --git              init .gitconfig"
    echo "-i --i3wm             init i3/config and configs for i3status and polybar"
    echo "-t --other            init .dircolors.256"
    echo "-x --xmonad           init Xmonad config"
    echo "-a --alacritty        init .config/alacritty/alacritty.yml"
}

initEnvironmentVariable()
{
    # create file "~/.config/environment"
    environment=$1
    echo -e "ENV=\"$environment\"" > "$HOME/.config/environment"
}

createLink()
{
    src=$1
    dst=$2
    successMessage="Successfully created link to: $PWD/$src"
    errorMessage="Failed to create link to: $HOME/$src"

    if [ -f "$HOME/$dst" ]; then
        rm "$HOME/$dst" && ln -s "$PWD/$src" "$HOME/$dst" && echo "$successMessage" || echo "$errorMessage"
    else
        ln -s "$PWD/$src" "$HOME/$dst" && echo "$successMessage" || echo "$errorMessage"
    fi
}

initBash()
{
    createLink ".bashrc" ".bashrc"
    createLink ".bash_profile" ".bash_profile"
}

initVim()
{
    createLink ".vimrc" ".vimrc"
    createLink ".ideavimrc" ".ideavimrc"
}

initGit()
{
    env=$(getEnvironmentVariable)

    createLink "$env/.gitconfig" ".gitconfig"
}

initAlacritty()
{
    env=$(getEnvironmentVariable)

    createDirIfNeed ".config/alacritty"
    createLink "$env/.config/alacritty/alacritty.yml" ".config/alacritty/alacritty.yml"
}

initI3wm()
{
    env=$(getEnvironmentVariable)

    # Create necessary dirs
    createDirIfNeed ".config/i3"
    createDirIfNeed ".config/i3status"
    createDirIfNeed ".config/picom"
    createDirIfNeed ".config/polybar"
    rm -r "$HOME/.config/polybar/scripts"

    # Create links to config files
    createLink "$env/.config/i3/config" ".config/i3/config"
    createLink "$env/.config/i3/bg-icescape.jpg" ".config/i3/bg-icescape.jpg"
    createLink "$env/.config/i3/bg-mountains.jpg" ".config/i3/bg-mountains.jpg"

    # i3status config
    createLink "$env/.config/i3status/config" ".config/i3status/config"

    # picom
    createLink "$env/.config/picom/picom.conf" ".config/picom/picom.conf"

    # polybar config
    createLink "$env/.config/polybar/launch.sh" ".config/polybar/launch.sh"
    createLink "$env/.config/polybar/config.ini" ".config/polybar/config.ini"

    # polybar scripts
    createLink "$env/.config/polybar/scripts" ".config/polybar/scripts"
}

initXmonad()
{
    env=$(getEnvironmentVariable)

    # Create necessary dirs
    createDirIfNeed ".xmonad"

    # Create links to config files
    createLink ".xmonad/xmonad.hs" ".xmonad/xmonad.hs"
    createLink ".xmonad/xmobar.hs" ".xmonad/xmobar.hs"
    createLink ".xmonad/get-volume.sh" ".xmonad/get-volume.sh"
}

createDirIfNeed()
{
    name=$1
    if [ ! -d "$HOME/$name" ]; then
        mkdir "$HOME/$name" || echo "Failed to create directory: $HOME/$name"
    fi
}

copyOrOverwrite()
{
    src=$1
    dst=$2

    echo "Overwriting file: $src -> $dst"
    cp -rf "$src" "$dst"
}

initOther()
{
    createLink ".dircolors.256" ".dircolors.256"
}

getEnvironmentVariable()
{
    # read and return value of $ENV from environment file
    errorMessage="Failed to determine environment variable ENV"
    [ -f "$HOME/.config/environment" ] && grep "ENV" "$HOME/.config/environment" | cut -f2 -d"\"" || echo "$errorMessage"
}

initMonitorEnvironment()
{
    env=$(getEnvironmentVariable)

    if [ -f "$env/.config/monitor-environment" ]; then
        copyOrOverwrite "$env/.config/monitor-environment" "$HOME/.config/monitor-environment"
    fi

    if [ -f "$env/.config/xprofile-variables" ]; then
        copyOrOverwrite "$env/.config/xprofile-variables" "$HOME/.config/xprofile-variables"
    fi
}

[[ "$1" == "" ]] && help

while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        -h | --help)
            help
            exit
            ;;
        -d | --dev)
            initEnvironmentVariable "dev"
            ;;
        -o | --home)
            initEnvironmentVariable "home"
            ;;
        -b | --bash)
            initBash
            ;;
        -v | --vim)
            initVim
            ;;
        -g | --git)
            initGit
            ;;
        -i | --i3wm)
            initI3wm
            ;;
        -t | --other)
            initOther
            ;;
        -x | --xmonad)
            initXmonad
            ;;
        -m | --monitor-env)
            initMonitorEnvironment
            ;;
        -a | --alacritty)
            initAlacritty
            ;;
                *)
            echo "ERROR: unknown parameter \"$PARAM\""
            help
            exit 1
            ;;
    esac
    shift
done
